{
	"info": {
		"_postman_id": "af2db974-9790-47bd-bcfa-ad617343eb9e",
		"name": "Github",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30599676"
	},
	"item": [
		{
			"name": "Get All Repositories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//https://www.chaijs.com/api/bdd/\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/user/repos",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						"repos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Repo E.G",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check repository name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].name).to.eql(\"api-test\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check login name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].owner.login).to.eql(\"9ino6ano\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body Matches String\", function () {\r",
							"    //var jsonData = pm.response.json();\r",
							"    pm.expect(pm.response.text()).to.include(\"This is your first repository\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user/repos",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						"repos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific Repo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/repos/:owner/:repo",
					"host": [
						"{{url}}"
					],
					"path": [
						"repos",
						":owner",
						":repo"
					],
					"variable": [
						{
							"key": "owner",
							"value": ""
						},
						{
							"key": "repo",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"first\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/repos/:owner/:repo",
					"host": [
						"{{url}}"
					],
					"path": [
						"repos",
						":owner",
						":repo"
					],
					"variable": [
						{
							"key": "owner",
							"value": ""
						},
						{
							"key": "repo",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "set up repository",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var repositoryName = \"Sample-API-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
							"pm.environment.set('repo_name',repositoryName);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{repo_name}}\",\r\n    \"description\": \"This is your first repository\",\r\n    \"homepage\": \"https://github.com\",\r\n    \"private\": false,\r\n    \"has_issues\": true,\r\n    \"has_projects\": true,\r\n    \"has_wiki\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user/repos",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						"repos"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if(pm.info.requestName==\"Create Repository\" || pm.info.requestName==\"Create Repository\"){",
					"",
					"    pm.test(\"Response time is less than 200ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(600);",
					"        }",
					");",
					"}",
					"else{",
					"    pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"    });",
					"",
					"pm.test(\"Status code name has string\", function () {",
					"    pm.response.to.have.status(\"OK\");",
					"    });",
					"",
					"pm.test(\"Content-Type is present\", function () {",
					"    pm.response.to.have.header(\"Content-Type\");",
					"    });    ",
					"}",
					"",
					""
				]
			}
		}
	]
}